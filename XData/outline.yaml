
(documentToNode): # given string
    loop:
        (commentOrEndOfLineToNode): #DONE
            (commentToNode): #DONE
                regex: "/ */"
                regex: "/# /"
                regex: "/.+/"
                regex: "/\n|\z/"
            (blankLineToNode): #DONE
                regex: "/ *(\n|\z)/"
        
    oneOf:
        (nothing):
            note: equivlent to a list with null as the first element
        (listToNode):
            loop:
                oneOf:
                    (commentOrEndOfLineToNode):
                    group:
                        regex: "/- /"
                        (listValueToNode):
                            oneOf:
                                (inlineValueToNode):
                                    (emptyMapToNode): #DONE
                                        regex: "/ */"
                                        regex: "/\{/"
                                        regex: "/ */"
                                        regex: "/\}/"
                                        regex: "/ */"
                                    (emptyListToNode): #DONE
                                        regex: "/ */"
                                        regex: "/\[/"
                                        regex: "/ */"
                                        regex: "/\]/"
                                        regex: "/ */"
                                    (specialValuesToNode): #DONE
                                        regex: "/true|false|infinite|infinity|-infinite|-infinity|NaN|nullptr|null|nil|none|undefined/i"
                                    (numberLiteralToNode): #DONE
                                        regex: "/(-|+)?/"
                                        regex: "/\d+(\.\d+)?/"
                                    (atomValueToNode): #DONE
                                        regex: "/@[a-zA-Z_][a-zA-Z_0-9]*/"
                                    (systemCharaterToNode):
                                        oneOf:
                                            regex: "/#tab|#newline/"
                                            regex: "/#unicode\[\w+\]/"
                                            regex: "/#ascii\[\w+\]/"
                                    (stringLiteralKeyToNode): #DONE
                                        oneOf:
                                            regex: '/"/'
                                            regex: '/[^\n"]*/'
                                            regex: '/"/'
                                            group:
                                                findDoubleQuotesThatAreAPerfectCube:
                                                loop:
                                                    oneOf:
                                                        a sequence of double quotes thats smaller than the starting quote: 
                                                        as many characters as possible that don't have the quote or newline:
                                                findMatchingDoubleQuotesThatAreAPerfectCube:
                                    (stringFigurativeKeyToNode):
                                        findSingleQuotesThatAreAPerfectCube:
                                        loop:
                                            oneOf:
                                                group:
                                                    (escapeSectionToNode):
                                                        (systemCharaterToNode):
                                                        (referenceToNode):
                                                            regex: "/#valueOf/"
                                                            optional:
                                                                loop:
                                                                    regex: "/\[/"
                                                                    regex: "/ */"
                                                                    (keyToNode):
                                                                    regex: "/ */"
                                                                    regex: "/\]/"
                                                a sequence of single quotes thats smaller than the starting quote:
                                        findMatchingSingleQuotesThatAreAPerfectCube:
                                    (referenceToNode):
                                (lineOverlapValueToNode):
                                    oneOf:
                                        (stringBlockToNode):
                                            (stringLiteralMultilineQuoteToNode):
                                                findDoubleQuotesThatAreAPerfectCube:
                                                (commentOrEndOfLineToNode):
                                                loop:
                                                    regex: '/ +[^"\n]*/'
                                                    regex: "/\n|\z/"
                                                    
                                                findMatchingDoubleQuotesThatAreAPerfectCube:
                                                (commentOrEndOfLineToNode):
                                            
                                            (stringFigurativeMultilineQuoteToNode):
                                                findSingleQuotesThatAreAPerfectCube:
                                                (commentOrEndOfLineToNode):
                                                loop:
                                                    regex: "/ +/" # make sure line is somewhat indented
                                                    oneOf:
                                                        regex: "/[^\{\n]*/"
                                                        (escapeSectionToNode): # note: only single line escapes
                                                    regex: "/\n|\z/"
                                                findMatchingSingleQuotesThatAreAPerfectCube:
                                                (commentOrEndOfLineToNode):
                                            
                                        (customValueToNode):
                                            (customAttributesToNode):
                                            regex: /.+/
                                            find indented block:
                                
                                (nextLineValueToNode):
                                    (commentOrEndOfLineToNode):
                                    get indented block:
                                        oneOf:
                                            (mapToNode):
                                                loop:
                                                    oneOf:
                                                        (commentOrEndOfLineToNode):
                                                        group:
                                                            (keyToNode):
                                                                oneOf:
                                                                    (atomKeyToNode):
                                                                        regex: "/[a-zA-Z_][a-zA-Z_0-9]*/"
                                                                    (numberLiteralToNode):
                                                                    (stringLiteralKeyToNode):
                                                                    (stringFigurativeKeyToNode):
                                                                    (customKeyToNode): # ex: ~date(UTC)~
                                                                        (customAttributesToNode):
                                                                            regex: "/\~/"
                                                                            (attributeToNode):
                                                                                regex: "/[a-zA-Z_][a-zA-Z_0-9]*/"
                                                                                optional:
                                                                                    regex: "/\(/"
                                                                                    loop:
                                                                                        (attributeToNode):
                                                                                        regex: "/ */"
                                                                                        regex: "/,/"
                                                                                    optional:
                                                                                        (attributeToNode):
                                                                                    regex: "/ */"
                                                                                    regex: "/\)/"
                                                                            regex: "/\~/"
                                                                        regex: "/ +/"
                                                                        oneOf:
                                                                            (literalStringInlineToNode):
                                                                            (figurativeStringInlineToNode):
                                                                            regex: "/[^~:'"\]\n]*?(?= *(\)|\]))/"
                                                                        regex: / */
                                                                        regex: "/\)/"
                                                                regex: "/ */"
                                                                regex: "/:/"
                                                            (listValueToNode):
                                            (listToNode):
                                            (nextLineInlineValue):
                                                loop:
                                                    (commentOrEndOfLineToNode):
                                                (inlineValueToNode):
    loop:
        (commentOrEndOfLineToNode):
            (commentToNode):
                regex: "/ */"
                regex: "/# /"
                regex: "/.+/"
                regex: "/\n|\z/"
            (blankLineToNode):
                regex: "/ *(\n|\z)/"

# todo: consider #this.file
# todo: consider #this.file.folder
# todo: consider #this.arguments
# todo: consider units
    # e.g. 100kilos
    # todo: consider units, e.g. 100 e10
    # ~grams~ 100: ~number(integer(base8))~ DEAD lbs_of_beef
    # ~grams~ 100: ~number~ 12.1343e100