contexts:
    root
    mapKey
    inlineValue (listValue, mapValue, interpolation)
    block
    referencePath

(documentToNode): # given string
    loop:
        (CommentOrBlankLine): #REDONE
            (Comment): #REDONE
                regex: "/ */"
                regex: "/# /"
                regex: "/.+/"
                regex: "/\n|\z/"
            (BlankLine): #REDONE
                regex: "/ *(\n|\z)/"
        
    oneOf:
        (nothing):
            note: equivlent to a list with null as the first element
        (List):
            loop:
                oneOf:
                    (CommentOrBlankLine):
                    group:
                        regex: "/- /"
                        (Definition):
                            maybe: adjective
                            oneOf:
                                (inlineValueToNode):
                                    (Map)<inlineValue>: #REDONE
                                        regex: "/ */"
                                        regex: "/\{/"
                                        regex: "/ */"
                                        regex: "/\}/"
                                        regex: "/ */"
                                    (List)<inlineValue>: #REDONE
                                        regex: "/ */"
                                        regex: "/\[/"
                                        regex: "/ */"
                                        regex: "/\]/"
                                        regex: "/ */"
                                    (SpecialValues): #REDONE
                                        regex: "/true|false|infinite|infinity|-infinite|-infinity|NaN|nullptr|null|nil|none|undefined/i"
                                    (Number): #REDONE
                                        regex: "/(-|+)?/"
                                        regex: "/\d+(\.\d+)?/"
                                    (Atom): #REDONE
                                        regex: "/@-?[a-zA-Z_][a-zA-Z_0-9]*/"
                                    (SystemCharacter): #DONE-ish
                                        oneOf:
                                            regex: "/#tab|#newline/"
                                            regex: "/#unicode\[\w+\]/"
                                            regex: "/#ascii\[\w+\]/"
                                    (String):
                                        (inlineStringLiteral): #REDONE
                                            oneOf:
                                                regex: '/"/'
                                                regex: '/[^\n"]*/'
                                                regex: '/"/'
                                                group:
                                                    findDoubleQuotesThatAreAPowerOfThree:
                                                    loop:
                                                        oneOf:
                                                            a sequence of double quotes thats smaller than the starting quote: 
                                                            as many characters as possible that don't have the quote or newline:
                                                    findMatchingDoubleQuotesThatAreAPowerOfThree:
                                        (blockStringLiteral): #REDONE
                                            leadingCommentsAndLines: null, // array of nodes
                                            startQuote: null, // string
                                            content: null, // string
                                            endQuote: null, // string
                                            postWhitespace: null, // string
                                            trailingCommentsAndLines: null, // array of nodes
                                                
                                        (StringFigurative):
                                            findSingleQuotesThatAreAPowerOfThree:
                                            loop:
                                                stop_if:
                                                    findMatchingSingleQuotesThatAreAPowerOfThree:
                                                oneOf:
                                                    regex: /[^{]+/ # note: exclude \n as well when in a key or reference context
                                                    (escapeSectionToNode): # TODO NEXT
                                                        regex: /{/
                                                        (SystemCharacter):
                                                        (Reference)[referencePath]: # DONE
                                                            regex: "/#valueOf/"
                                                            regex: "/\[/"
                                                                loop:
                                                                    regex: "/ */"
                                                                    (Key): #DONE
                                                                        oneOf:
                                                                            (ValueOfAKey): #DONE
                                                                                oneOf:
                                                                                    (SpecialValues):
                                                                                    (Number):
                                                                                    (Atom):
                                                                                    (SystemCharacter):
                                                                                    (String): #recursion
                                                                                    (Reference): # also recursion
                                                                            (KeyAndAdjective): #DONE
                                                                                (CustomAdjectives): #DONE
                                                                                    regex: "/\(/"
                                                                                    loop:
                                                                                        (Adjective): #DONE
                                                                                            regex: "/ */"
                                                                                            regex: "/[a-zA-Z_][a-zA-Z_0-9]*/"
                                                                                            regex: "/ */"
                                                                                            regex: "/,/"
                                                                                    regex: "/\)/"
                                                                                    regex: "/ +| *$/"
                                                                                (ValueOfAKey):
                                                                    regex: / */
                                                                    regex: /,/
                                                            regex: "/ */"
                                                            regex: "/\]/"
                                                        regex: "/ */"
                                                        regex: /}/
                                    (Reference):
                                (lineOverlapValueToNode):
                                    oneOf:
                                        (stringBlockToNode):
                                            (stringLiteralMultilineQuoteToNode):
                                                findDoubleQuotesThatAreAPowerOfThree:
                                                (CommentOrBlankLine):
                                                loop:
                                                    regex: '/ +[^"\n]*/'
                                                    regex: "/\n|\z/"
                                                    
                                                findMatchingDoubleQuotesThatAreAPowerOfThree:
                                                (CommentOrBlankLine):
                                            
                                            (stringFigurativeMultilineQuoteToNode):
                                                findSingleQuotesThatAreAPowerOfThree:
                                                (CommentOrBlankLine):
                                                loop:
                                                    regex: "/ +/" # make sure line is somewhat indented
                                                    oneOf:
                                                        regex: "/[^\{\n]*/"
                                                        (escapeSectionToNode): # note: only single line escapes
                                                    regex: "/\n|\z/"
                                                findMatchingSingleQuotesThatAreAPowerOfThree:
                                                (CommentOrBlankLine):
                                            
                                        (customValueToNode):
                                            (customAttributesToNode):
                                            regex: /.+/
                                            find indented block:
                                
                                (nextLineValueToNode):
                                    (CommentOrBlankLine):
                                    get indented block:
                                        oneOf:
                                            (Map):
                                                loop:
                                                    oneOf:
                                                        (CommentOrBlankLine):
                                                        group:
                                                            (DefinitionKey)[mapKey]:
                                                                (Key):
                                                                regex: "/ */"
                                                                regex: "/:/"
                                                            (Definition):
                                            (List):
                                            (nextLineInlineValue):
                                                loop:
                                                    (CommentOrBlankLine):
                                                (inlineValueToNode):
    loop:
        (CommentOrBlankLine):
            (Comment):
                regex: "/ */"
                regex: "/# /"
                regex: "/.+/"
                regex: "/\n|\z/"
            (BlankLine):
                regex: "/ *(\n|\z)/"

# todo: consider #this.file
# todo: consider #this.file.folder
# todo: consider #this.arguments
# todo: consider units
    # e.g. 100kilos
    # todo: consider units, e.g. 100 e10
    # ~grams~ 100: ~number(integer(base8))~ DEAD lbs_of_beef
    # ~grams~ 100: ~number~ 12.1343e100